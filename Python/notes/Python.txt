Basic Python notes

append - 	foo.append["bar"]

Bitwise operations - 
				5 >> 4  # Right Shift
				5 << 1  # Left Shift
				8 & 5   # Bitwise AND
				9 | 4   # Bitwise OR
				12 ^ 42 # Bitwise XOR
				~88     # Bitwise NOT
				 you can write numbers in binary format by starting the number with - 0b

Comment -	#comment - single line
			""" Multi-Line comment...
			"""

Conditionals - 
			Equal to (==)
			Not equal to (!=)
			Less than (<)
			Less than or equal to (<=)
			Greater than (>
)			Greater than or equal to (>=)

			     Boolean Operators
			------------------------      
			True and True is True
			True and False is False
			False and True is False
			False and False is False

			True or True is True
			True or False is True
			False or True is True
			False or False is False

			Not True is False
			Not False is True
			--------------------------
			Not - not is evaluated first;
			And - and is evaluated next;
			Or - or is evaluated last.
			
			Use of and -	1 < 2 and 2 < 3 is True;
							1 < 2 and 2 > 3 is False.
			Use of or - 	1 < 2 or 2 > 3 is True;
							1 > 2 or 2 > 3 is False.
			Use of Not - 	not False will evaluate to True, while not 41 > 40 will return False.

Dictionary - 
			residents = {'Puffin' : 104, 'Sloth' : 105, 'Burmese Python' : 106} # key - value pairs
			Delete Entrie - del dict_name[key_name] 
			New Entries - residents['dog'] = 99
						dict_name[key] = new_value
			Remove - residents.remove("Puffin")

Escaping Chars - 
			\ ('This isn\'t flying, this is falling with style!')

extend - 

For in -	for number in my_list: #my_list = [1, 2, 3, 4]
				print 2 * numbers	#2 4 6 8

Function -	def foo(bar):
				#indention is a must
			call a function - foo(bar):

If - 		if foo == 1:
				#do this
				print "foo is equal to 1"

If else - 	if foo == 2:
				print 2
			else:
				print "Sorry"

I/O file In/output -
			file_handler_name = open("filename.txt", "w") 		#open file in.. "w" write mode, "r" read mode, "r+" read and write mode, "a" append mode
			my_file.write("Data to be written")	#write
			file_handler_name.close()							#close file
			file_handler_name.closed							#returns True if closed
			my_file.readline()					#readline
			__enter__() and __exit__()			#invoke with this method - with and as.
										with open("file", "mode") as variable:
											variable.write("Success!")

Import - 	import math -- print math.sqrt(25) -- # 5.0
			from math import sqrt	#sqt
			from math import *		#everything - regex

Index access -
			fifth_letter = "MONTY"[4] # Y - applied to a string

insert - list.insert(i, x)		# MORE...................................................
					https://docs.python.org/2/tutorial/datastructures.html

join - 		"what you want to sperate item".join(list_name) -- 

Length -	len(foo) # parrot = "Green"  - print len(parrot) #5

line break - 
			\ code line break - will allow a new line to start in this strictly typed language
			n/ new line printed... also - print foo, "is my var" # prints "foo is my var"

List - 		list_name = [item_1, item_2] #used like array in JS
				access by index -- numbers = [5, 6, 7, 8]  -- print numbers[0] + numbers[1] # equals 11
				assign values -- numbers[0] = 999 #value is changed, the original is replace/lost
				append values -- numbers.append(777) #value added to the end of List [5, 6, 7, 8, 777]
				Slicing list -- first = numbers[0:2] -- print first -- # ?5,6

lower - 	lower() # parrot = "Green" - print parrot.lower() #green # dot notion only works with strings

Math -		add +, subtract -, multipy *, divide /, exponent ** ( eggs = 10 ** 2 # = 100), Modulo % (spam = 3 % 2 # = 1)
			Int - 7
			Float -	1.23
			Bool - True
			max() -- maxium = max(1,2,999,3)	#999
			min() -- minimum = min(1,9)			#1
			abs() -- absolute = abs(-42)		#42
			type() -- print type(4) #number -- print type('Moo') #String print type(.1) #float
			floor -- math.floor(x)
			isnan -- math.isnan(x)  -- https://docs.python.org/2/library/math.html

Object - 	class Animal(object):						#Use of "object", let's it inherit "object" class
				def __init__(self, name, age):			#init "boots up" a class instance object (initialize)
														#self - this is how the object keeps track of itself internally
					self.name = name
					self.age = age

			zebra = Animal("Jeffrey", 2)
			giraffe = Animal("Bruce", 1)

			print zebra.name, zebra.age			# Jeffrey 2
			print giraffe.name, giraffe.age		# Bruce 1

Object Inheritance syntax - 
			start

Object --sub misc.
			pass - used as filler in Objects...

			super - access a parent/super class's methods
			class Derived(Base):
				def m(self):
				return super(Derived, self).m()


Print -		print "string" -- print foo_variable
				print "foo" + "bar"
				print "The value of PI is around" + str(3.14)
					string_1 = "foo" -- string_2 = "bar"
				print "the two variables are %s and %s." % (string_1, string_2)

replace - 	str.replace(old, new[, max])  -- http://www.tutorialspoint.com/python/string_replace.htm

Return - 	return foo #this will output foo

Sort - 		.sort()  -- numbers = [1, 3, 2]
					numbers.sort()

String replacement - 
			 - "This is a %s %s with %s MPG."% (self.color, self.model, self.mpg) #This is a silver DeLorean with 88 MPG.

Switch - 	if answer > 5:
				return 1
			elif answer < 5:          
				return -1
			else:
				return 0

Upper - 	upper() # parrot = "Green" - print parrot.upper() ## dot notion only works with strings
				pi = 3.14  -- print str(pi)

Variable -	my_variable = 10



















