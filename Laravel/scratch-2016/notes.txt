notes.txt

Laravel notes from tuts.

===========
raw notes
	- I think there is still relevant information here and should be kept.
	- Some of this is pointless placeholders for things covered
	- 

	from tuts
		- 
		- 
===========
note:

    - CLI  // list of commands, not a logical list
    	- php artisan // version, options, commands list
    	- php artisan help foo:bar  // get info on foo:bar

    	-	php artisan make:migration create_user_table --create=users
    			// creating a migration file, with some default values

  			make a model
  				// ???????? php artisan make:migration foo_names_table  ???? 
    		
    		php artisan migrate
    			// implement the migration you just created
    		php artisan migrate:refresh
    			// drop all data in DB and reimplement migration DB setup 
    		php artisan Schema::drop('users');

	- php artisan tinker
		- adding data to db via tinker

		- check User(s) in the DB
			- App\User::all();
		- check Note(s) in the DB
			- App\Note::all();
		- Create a new foo the long way
			- create a Card
				-	namespace App;
					$card = new Card;
					$card->title = 'My First Card';
					$card->save();

			- create a Note
				$note = new Note;
				$note->user_id = 1;
				$note->body = 'The body of the note.';
				$card->addNote($note); // note data is printed to screen

			- create a User				
				$user = new User;
				$user->username = 'FooName';
				$user->email = 'FooName@Bar.com';
				$user->password = bcrypt('FooPassword');
				$user->save();

				User::all(); // data for user printed to screen

			-   $user = new App\User; or 	$user = new User; if you are not in App
				$user->username = 'fooName';
				$user->email = 'fooName@fooemail.com';
				$user->password = bcrypt('fooPassword');
				$user->save();
				
			-	$note = new Note;
				$note->user_id = foo1;
				$note->card_id = fooNumber;
				$note->body = 'Foo note';
				$card->addNote($note);
				
				notes needs
					$table->increments('id');
            		$table->integer('user_id')->unsigned()->index();
            		$table->integer('card_id')->unsigned()->index();
            		$table->text('body');
redo 10
	- error with showing data in cards/1 input field
	- possible DB schema error or naming error(s)
		- delete old migrations, create new ones, add user and notes
	- redid all DB data
	- might be problem with breaking change
	- consider restarting fresh and sprinting through.

===
current to 08
  - end of 7  ... data still showing wrong.  Is my data wrong or displayed wrong or both?
  - It was showing cached data.  It looks like I have more than one DB, cards made on different days with different names.
  - Serving DB and php artisan tinker DB show different
  - Data is now showing in web and CLI the same
  - add another card to match what the tut shows.
  	- done
	  
08
	- php artisan make:migration create_notes_table --create=notes
	- $cards->notes;  // this will get the relationship
	- @ 08 5:00 Tinker CLI not showing relationship for Card/Note correctly
		- $card = App\Card::first();
		- $card->notes;  // should fetch relationship
			- shows "[]" empty set?
			App\Note::all();
				- show data that is the same as his data.
			- maybe his method no longer works or I made an error.
	- $card->notes[0] // this fails... maybe the method notes is broken
	- added a new Note, so now we have a Note for both id 1 and 2.
	- working now
		- must first "$card = App\Card::first();"
		- then "$card->notes;"
	- About Tinker
		- remember to enter/exit it to refresh (I assume it could have data problems if you didn't).
	- watch the SQL queries - 08 @7:00?
		- this is a lesson that Laravel caches the SQL queries
		- DB::listen(function($query) { var_dump($query->sql); });
	- creating a Note all in one line
		- $card->notes()->create(['body' => 'The third note.']);
			- "MassAssignmentException", got to set properties for 'body'
- end 8... everything is working perfectly
- start 9
	- @ 6:59 - had to do the very silly "token mismatch exception" work around in "VerifyCsrfToken"
			- I find out later that you can fix this with one line of code adding a cert token.
- end 9 - all working
- start 10
	- @9:49 - still perfect
	- @13:20 - still good post USER table creation
	- @14:21 - errors with DB refresh [drop/migrations]
		- error while refreshing migrations, typo... typo fixed
		- retried refreshing migration... errors
		- rollback migration
		- refresh migration... error
			- error from not having data in new/old tables???
			- added Card, Notes still exist???, Added One User
			???
		- refresh.. looks like create_cards_table works perfect on migration, but Cards and Users don't
		- fails to add User(s), but can add Cards and Notes.
		- how do I fix this?
			- try refresh the long way without Laravels help
				- save affected files else where
					- DB /database/database.sqlite
					- migrations
						- Cards /database/FooDate_create_cards_table.php
						- Notes ..._notes_table.php
						- Users ..._users_table.php
				- delete/remove migration files and database
				- create them again with help from the old files...
					- You would need to make the adjustments to the config files for using sqlite instead of the default mysql DB, but I don't because I already did. 
					- create empty DB file
						- 'touch database.sql'
					- create migrations
						- Create migration file
							-'php artisan make:migration create_cards_table --create=cards'
						- Edit migration file to reflex what you need
						- Migrate file do/make/initialise migration
							- 'php artisan migrate' 
						- The tut added data to the DB this way, I'm not sure if this is requried 
							- in Tinker
								- 'DB::table('cards')->insert(['title' => 'My New Card', 'created_at' => new DateTime, 'updated_at' => new DateTime])';
								- Check what was created
									- DB::table('cards')->get();
								- Delete foo
									- DB::table('cards')->where('title', 'My New Card')->delete();
								- created again, but now the id is one greater
								- added second new card
						- created migrations for Note and User
						- add data for User
				- will it work?
					- yes and no
						- yes all the data can be added and the DB is working great, but you can't add more Notes via the web page.
							- The error shows a problem with the user_id field.
								- Maybe the Cards Controller needs to be fixed..?
					- How does the app know which User is adding data, bc that seems to be the error it is having?
					- Looks fine @15:47
					- Problems @17:01
						- Showing the User Name instead of ID...
					- @17:26
						- I'm not sure why his code can get the user data from this
							- return $card->notes[0]->user;
					- broken at this point
						- I'm guessing we are using different versions of the framework, which is causing errors and or differences in the code.
				    - I will save a compressed version at this point and continue on with what ever version was working last. =(
- end 10 - with it not working 100% bc of above reasons.
- start 11
	- @06:42 working fine, aside from the problem from video 10
	- @14:48 errors detailed message doesn't output like he shows
- end 11
- start/end 12
- start 13
	- Fresh copy, starting with Auth User setup.
		- php artisan make:auth;
		- create DB file
		- adjust DB config files to use sqlite
		- migrate default migrations
			- php artisan migrate
				- must setup DB files first, check notes on adjusting the three files
		- auth working
		- get user lost password/password reset working
		- setup mail with email.php and .env and send data to 'log'
			- MAIL_DRIVER=log
			- restart server to refresh files
- end 13
- start 14
	- middleware
	- no changes made to project
		- jumping back to old project?
			- it looks like he has done the auth config in the old CRUD project, but never showed it being done there, which is strange and troubling.
		- I'm not sure if any of that was required for the project
		- @10:00 he makes middleware
			- php artisan make:middleware MustBeAdministrator
- end 14
- start 15
	- It looks like he is using a fresh copy of a Laravel install for Flashing to the Session
	- I'm going to try and add it to the last fresh copy.
	- 
		- Session::flash('status', 'Hello There');
		  Session::get('status')
		  - that works
		- @8:00 stopped
- start 16
	- "fresh install" again
	- no follow along, just explanation
- end 16
- start 17
	- Useful code you can use for testing in Laravel
		- dd
		- var dump
		- DB::listen(function($query) {
			var_dump($query->sql, $query->bindings);
		})
	- he was using Laravel version 5.2 for this tut
	- routes code that showed all routes within 'middleware' are been extracted into a service provider
=============================
=============================
-start new tut
- Udemy - PHP with Laravel for beginners - Become a Master in Laravel
- he is using mysql with phpMyAdmin for convenience updates and changes
	- remember to install phpMyAdmin if you don't have it
		- CLI install
		    - sudo apt-get install phpmyadmin
        	    - https://help.ubuntu.com/community/phpMyAdmin
                - poorly default configuration file need to be fixed
                	- sudo dpkg-reconfigure phpmyadmin
                	http://stackoverflow.com/questions/20731487/phpmyadmin-pma-table-uiprefs-doesnt-exist
                - default login/pass root/root
                - create database in phpmyadmin
                	- remember to update .env file in Laravel to reflect correct: DB name, username, and password  
- end @ section 6... 
- Mostly basics 
	- Laravel blade templeting 
		- 'foreach'
		- php built in functionality 'compact'
		- dependence injection
- DB tables, creating a new column to an existing table without dropping the table/data
	- php artisan make:migration add_is_admin_column_to_posts_tables --table="posts"
		- creates migration file
			- you fill in the data, that references the table that you want to add a column to and the info for the new column
				- $table->integer('is_admin')->unsigned();
				  ...
				  to drop it
				  $table->dropColumn('is_admin');
		- php artisan migrate  [this will initiate the change]
- php artisan migrate:status
	- list of migrations that have ran
- Raw SQL queries [section 9-2/3]
	- Insert - created a route with a DB insert method
	- Read - route that queries selected Foo/column/cell/etc and returns data
	- Update - 
	- Delete -
- Eloquent - active records, DB - section 10 CRUD plus trash
	- nice section of pragmatic data CRUD
	- php artisan make:model Post -m
		- creates post file
	- note not all of his code worked in today's Laravel version
- Eloquent relationships - section 11
	- functions
	- Laravel uses Method Chaining foo->bar->goo->dar
	- "return" will only return a single value, not many... [not an array/object?]
	- echo can show more than one value
	- relating tables - roles, pivot table
===========
migrations

	- add column to existing table
		- php artisan make:migration add_is_admin_column_to_posts_tables --table="posts"
	- migrate:rollback
		- this will drop all of the tables for this project in mysql, except Laravel's Migration table that it uses to keep track of things.
	- use var_dump for more info on results
		- return var_dump($results);
		- must have the underscore _
	- @10-02 migrate:refresh fails, bc he asks to drop deleted_at column, I was able to clear the error by commenting out his Down method and not dropping the deleted_at column
	- one to many, tips, many to many, 'has many to relation', querying intermediate table, polymorphic relation, inverse polymorphic, many to many polymorphic
	- using a pivot or look up table @11/7
===
php artisan make:migration add_deleted_at_column_to_posts_tables --table=posts
11/8-1
// Has many through relation
// finding a value of an object through a distant object... or
// two degrees of separation
- Users table, Posts table, Countries table
	- From Foo-post to Users country
		- foo-post -- foo-user -- foo-user's country id -- country with bar id
- files to change
	- Add route
		- /user/country
	- Add table for countries
		- CLI php artisan make:model Country -m
			- made ...create_countries_table
	- Add column for User country
		- php artisan make:migration add_country_id_column_to_users --table=users
	- ... model in /app/Providers/Country.php
- the connection for the relation is in the model
	- another model in app/Providers/User.php
		- foreign keys -- user_id and role_id 
			- public function roles(){
				return $this->belongsToMany('App\Role', 'user_roles', 'user_id', 'role_id');
			}
		- if you follow 'convention' you don't need to give the foreign keys in Laravel
			... return $this->belongsToMany('App\Role');
- polymorphic relations
	- allow a model to be loaned to more than one model in a single association 
	- Parts
		- Make model
			- php artisan make:model Photo -m
			- ...create_photo_table
				 - creates models file
				- creates migration file
		- comment out 
			- migration create_post line post user_id
		- refresh migrations
			- php artisan migrate:refresh
		- Add data to the DB, as all the old data was destroyed with the refresh
		- add methods to the models
		- Add Routes 
==========================
10/12
 - migration
 	- php artisan make:model Video -m
 	- php artisan make:model Tag -m
 	- php artisan make:model Taggable -m
12/... Tinker
	- very basic cases and instructions
13/ Eloquent One to One CRUD
	- create new Laravel install and DB for this portion
		- new Laravel
			- edit .env
		- new DB
	-CRUD... C.  Create
		- create Address model plus migration
			- php artisan make:model Address -m
			- migrate the migrations
		- ... add user_id column to Address table, migrate:refresh
		- create route that will add address to user db
			- error
				- 'MassAssignmentException' error
					- edit Address.php Model
						- protected $fillable = ['name'];
			- add address #1 and #2 for the same user_id...  created a user with two addresses
	- CRUD U. Update
		- just route creation with data find and change
	- CRUD R. D. Read and Delete
14 Eloquent One to Many
	- He creates a new install for this, I'm going to use the one from 13
	- make Post model and migration
		- php artisan make:model Post -m
			- edit Post migration
				- Add: user_id, title, body
		- migrate
		- edit Post.php model
			- allow mass assignment for title and body
15 Many to Many relations
	-make Role model and migration
		- called "create_role_user_table"... for the two table that it is linking role and user
		- note: this is a Pivot Table, follow the naming convention alphabetical_ordered_with_underscore
			... role_user
		- php artisan make:migration model Role -m
	- make migration
		- php artisan make:migration create_role_user_table --create=role_user
		- migrate
	- routes
	- relations and mass assignments
	/8
		- attaching
			- used in this context to change the role of a user.. i.e. User role id changed
		- detach
			- removes the above role(s), one or many
16 Eloquent Has many through relationship - polymorphic
	- "polymorphic relations allow a model to belong to more than one another model on a single association"
	- he is following "an example", from where... the Laravel site?
	- CRUD
	 	- create model and migration for Staff, Product, Photo
	 		- php artisan make:model Staff -m
	 		- php artisan make:model Product -m
	 		- php artisan make:model Photo -m
	 	- edit the Staff, Product, and Photo migrations adding columns
	 		- Photo will be the one that will relate the other two.
	 	- migrate migrations
	 	- edit models files Photo, Staff, and Product (this has 'App\Photo', 'imageable')
	 - much the same with the CRUD.. the main difference being the model setup and more method to chain to.
17 Eloquent Polymorphic Relationship CRUD
	- making model Post, Video, Tag, Taggable
		- php artisan make:model Post -m
		- php artisan make:model Video -m
		- php artisan make:model Tag -m
		- php artisan make:model Taggable -m
	- keep tack of the pivot table values and the taggable associations  
	My data model is different than the tut bc I didn't do a new install for each section.... FYI
18 Forms and Validation
	- fresh copy... no you have to use the old one with foo migrations
		- Country, Photo, Post, Role, Tag, Taggable, User, Video
	- errors...
	- routes
		- *********************************************** * bc it's
		- *********************************************** * important!
		- ****** this is the route you use to auto create a lot of routes.
		- Route::resource('/posts', 'PostController');
		- this comes with built in methods
			- store, index, create, destroy, update, show, edit
	- without extensions
		- creating posts, 
19 Forms - Package and validation
	- errors with posts/READ, CREATE working with DB 
	- with extensions
		- using laravelcollective/html
		- follow vendor install tut
			- composer.json
			- rules...
20 DB model more
	- Dates
		- using Carbon for Dates, which makes dealing with dates quick and easy.
			- Carbon is included in Laravel, add it with nesbot/carbon for other projects
	- Accessors (pulling data out of the DB and alter it before presentation)
		- in model, getNameAttribute method.. must use 'get' and 'Attribute'
		- this wasn't explained in full, research
			- it looks like the method name is linked/influenced by the URL name... i.e. 'get'
	- Mutators
		- changes value before it gets to the DB
		- same as about but using 'set' instead of 'get'
	- Query Scope
		- "shortcuts for complex operations"
21 Forms - Uploading files
22 Form - Login
	- most basic
		- php artisan make:auth
		- tour of some of the auto created files for auth...
23 Middleware
	- walk through of files to add you middleware to 
24 Sessions and flashing data
25 email API Mailgun API
	- his example was for a account step-up confirmation email sent with Mailgun.
	- Laravel has official step-by-step guide to integrate Mailgun and/or Mandrill
	- he says SMTP has some problems with Laravel, better to use an API.
	- covers step to use a custom domain name for your emails, which entails getting premissions from your domain host if you have a site/host domain name you want to use.
26 Git and Github
	- general information about git and github
30 Full app tut
	- new clean install of a Laravel app
	- setup DB, .env,
		- test DB migrations - working
	- make:auth
		- "success"
	- Create folders for views
		- create
			- resources/views/admin/index.blade/php
			- ...admin/categories/index.blade.php
			- ...admin/posts/index.blade.php
			- ...admin/users/index.blade.php
			- 
		- he chose to create folders for views, but it isn't required or the only way.
	- Track with Git...
	- edit migrations
		- users add rows for role_id, is_active
	- create make:model Role -m
	- setup Relationship
	- migrate:refresh to make changes
	- populate roles in DB - Admin, Author, Subscriber
	- make user with register function on the new website
	- change users role_id to Admin
	- checking relationships with Tinker
		- $user = App\User::find(1) 
			- (outputs User info)
		- $user->role
			- (outputs info)
		- create user in Tinker App\User::create(['name'=>'John Doe', 'email'=>'JDoe@example.com', 'password'=>'thisIsAnExample', 'role_id'=>'2', 'is_active'=>'1'])
			- how do you use the crypt method for a password via Tinker?
	- create a 'resource' route
	- make:controller --resource AdminUsersController
		- file generated app/Http/Controllers/Auth/AdminUsersController	
	- check list of routes
		- php artisan route:list
	- add admin.users.index to AdminUsersController - index route
	- add some random test content to app/resources/views/admin/users/index.blade.php
		- test the the above page
	-  fill in some of the other routes like the one you just did in that same controller
		- return view('admin.users.foo');
	- He lead you through installing node, npm install --global gulp
		- I already have them
	- Download css/fonts/js files he provides for the app
		- 27/10/3:08
		- bootstrap, jquery
		- create and paste in resources/views/layouts/admin.blade.php
		- still dealing with this file... got it!
		- I'm not sure why bootstrap is in his sass styles, I thought that it was included in Laravel
		- all included...  Clean installs with Gulp
		- one page damaged, recreating....
	- creating master page for admin page
	- working admin/user page, working fine
		- still have bootstrap dropdown menu problems
	- 19 PW field and custom requests
	 	- add field to form
	 	- make sure the field can't be empty
	 	 	- php artisan make:request UsersRequest
	 	 	- edit the UsersRequest RULES... for the form fields
	- 21 file upload
		- adding photos column to Users migration
			- php artisan make:migration add_photo_id_to_users --table=users
			- edit new file and add column info
			- migrate
	- 22
	- 23 User photos migrations
		- php artisan make:model Photo -m 
	- 25
		- go back to this section to hunt the errors
		error 
			- role and active still not getting sent to the DB
				- is this a template problem?
			- no photo id
				- his had a series of numbers and then it's proper name
			- photo added to DB but name is wrong, is it even there?
				- it's there  /public/images
				- within the AdminUserControler... the value is literally '$name', not $name
				- still has problem with the prefixes
					- it has an extra "image" and then date and file name
					- this was a problem with the app/Providers/Photo.php '/images', instead of '/images/'
			- "remember token" field empty, should this me filled in?
				- his is the same "NULL"
			--- Providers/User.php
				- $fillable wasn't filled in completely, the missing fields would not fill, bc they were not on the list!!!
				- this fix cleared up old problems with route admin/users, it must have failed bc the DM column is empty or NULL
				- still have problem with Photos names in DB
	- 27
		- To make pw not a required field that needs to be updated in the User edit page
			- php artisan make:request UsersEditRequest
			- error... watch your closing tags, Laravel will throw crazy errors
	- 31 clean up
		- error...
			- $input = $request->except('password');
		- working perfectly
	- 32 security
		- carbon is a class that deals with dates
		- create middleware and route group
			- php artisan make:middleware Admin
			- register it in Http/Kernel.php
				- protected $routeMiddleware = [
				...
				'admin' => \App\Http\Middleware\Admin::class,
				]
			- create route group
				- Route::group(['middleware'=>'admin'], function (){
				  Route::resource('admin/users', 'AdminUsersController');	
				  });
			- app\User.php
				- create setpassword and isadmin functionality
		- make 404
	- 33
		- error ... login pw check is now failing
			- he tells you to bcrypt the PW and then shows it bcrypted a second time... so you are hashing it twice, which makes impossible to know your pw
			- I commented out the bcrypt in app/User.php
			- it's much like this http://stackoverflow.com/questions/29452497/laravel-5-auth-these-credentials-do-not-match-our-records
				- "I had the same issue. The reason for mine was that I defined setPasswordAttribute in my User model so every time, I enter plain password, it hashes before sending to DB.

					public function setPasswordAttribute($password)
					{
					    $this->attributes['password'] = \Hash::make($password);
					}
				and in my db:seed, I was creating a user with hashed password with Hash::make("password"), too. So laravel hashes hashed password :)
				answered May 26 '15 at 20:07
					mervasdayi
					884
	- 34 deleting Users
		- app/Http/AdminUsersController
			- destroy...
		- add delete button on user template
			- app/resources/views/admin/users/edit.blade.php
		- his bootstrap button layout was not the same as mine, maybe their is a version difference or other code he had.
	- 35 messages
		- session ui message to show User deleted
	- 36 remove photo locally
		- add code to remove photo in AdminUsersController
	- 37 add more security
		-  app/User.php add check for is_active for auth section
		- redirect to admin edit to app/Http/Contorllers/Auth/AuthController.php
		
	- 28/01
		- Setting Route files
		- improve the 404
		- create route 
			- add route in routes.php
			- make contorller
				- php artisan make:controller --resource AdminPostsController
			- edit controller in app/Http/Controllers/AdminPostsController.php
				- add route to   return view('admin.posts.index');
			- edit resources/views/admin/posts/index.blade.php
			- fix link to Posts in template resources/views/admin.blade.php with blade {{}}
			- add layouts to create and edit posts
			- set it up in AdminPostsController
	- 02
		- create model and migration
			- php artisan make:model Post -m
			- edit the migrate, adding columns
			- migrate
		- edit protected
		- add data with Tinker
			- $post = App\Post::create(['title'=>'my first post', 'body'=>'I love Laravel with Edwin Diaz.']);
		- add data to page
			- 	$posts = Post::all();
        		return view('admin.posts.index', compact('posts'));
     - 03
     - 04 relationship setup
     	- edit Post,
     - 05 creating form for Posts
     	- edit posts/create.blade.php
     - 06  form part 2
     	- edit AdminPostControler
     	- make:request
     		- php artisan make:request PostsCreateRequest
     		- edit app/Http/Requests/PostCreateRequest
     - 07 request rules off for testing and back on for frontside UI bootstrap warnings about missing fields.
     - 08
     - 09 
     	- update template add Category options in app/resources/views/posts/create.blade.php
     	- Error... After post add, redirect to admin/posts is a blank page??
     		- 
     	- Error.. it's also not adding a new post to the DB
     		- did I skip a video? nope.
     		- it is adding the image to the local /images file and the DB, but not to the posts
     		- I was missing one line he didn't go over
     			-"$user->posts()->create($input);"
     	- edit include image on Posts page, edit template
     	- Post categories still only show an ID number for the subject name.  Are we going to add a DB table for that or will it be somewhere else in the code? Yes, he creates a migration and model

     - 10 
     	- Create migration for categories
     		-  php artisan make:model Category -m
     			- auto add Category.php file to app/
     				- add "protected fillable" to allow fields in DB to be filled.
     		- edit migration (add string 'name') and migrate it
     		- add data to Categories via the phpMyAdmin
     - 11
     	- I had to change a name for it to work, otherwise the page gave an error about an unexpected char
     		- "<td>{{$post->categories ? $post->categories->name : 'Uncategorized'}}</td>"
     			- his version used '$post->category' and worked
     - 12 creating/pushing to  a Git repository 
     - 13 warnings about Git
     - 14
     - 15 
     	- he missed tell us to add a use on the top
     	- reminds us to look up helper functions from PHP on the Laravel site
     - 16
     	- edit template for post delete
     - 17
     	- edit AdminPostController  - function destroy
     	- deleting posts and photos
     - 18
     	- deleting users and relations
     	- edit Posts migration
     		- $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');
     		- php artisan migrate:refresh
     - 19 
     	- ...
     29/1
     	- create categories controller
     	- php artisan make:controller --resource AdminCategoriesController
     		- edit index route
     		- edit main admin template to get categories link working
     - 2
     	- edit to add categories  
     - 3
     - 1
     	- creating a media page for photos
     - 2
     - 3
     	- he uses a plug-in for the upload functionality
     		- dropzone.js
     -4
   	 -5 deleting images

==========	




