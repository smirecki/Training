Handlebars-notes


(http://ryanhlewis.com/pluralsight/)
section 02-04

Side Notes:
=================
research MDL - Material Design Lite
  "with a goal to provide guidelines for good design and beautiful UI across all device form factors. Today we are releasing our effort to bring this to websites using vanilla CSS, HTML and JavaScript."
  "MDL has a low overhead in terms of code size (~27KB gzipped)...""
  - http://www.getmdl.io/faq/index.html
  - https://medium.com/google-developers/introducing-material-design-lite-3ce67098c031



================

Example

  Template
    Dogs are the {{dog_quality}}!
  Data(Context)
    {
      dog_quality : 'cutest'
    }
  HandlebarsOutput
    Dogs are the cutest!

=========
Simple Handlebars Rendering Example

var myTemplate = 'My name is {{name}}.';
var compiled = Handlebars.compile(myTemplate, options);
  // renders Function myTemplate
var rendered = compiled({ name: 'Ryan' });
========

"The Handlebars Dance"

Get Template
Compile Template
Render with Data
Insert Render HTML
==========

Nested Paths in Mustache

{{#myObj}}
	Name: {{name}}
	Age: {{age}}
	Address: {{#address}}
	  {{street}}
	  {{city}}, {{state}} {{zip_code}}
	{{/address}}
{{/myObj}}

Nested Paths in Handlebars

Name: {{myObj.name}}
Age: {{myObj.age}}
Address: {{myObj.address.street}}
	{{myObj.address.city}}, {{myObj.address.state}}
	{{myObj.address.zip_code}}
=================

Each Helper Structure

{{#each objectOrArray}}  //Object or Array to iterate over
  {{prop1}}  //Current element becomes context
  {{prop2}}
  {{prop3}}
{{/each}}

===================
Each Helper Example

Template
{{#each dogs}}
  {{this}}
{{/each}}

Template Data

{
	'dogs': [
      'Spot',
      'Fluffy',
      'Maybe'
	]
}

Output
  Spot
  Fluffy
  Maybe
===================
Handlebars Blocks

Begin opening expression with #
Begin closing expression with /
========
Expression Arguments
{{siteTittle}} // first argument
{{someHelper arg1 arg2}} //other arguments
==========
Each Helper Example ~ Object Edition!

- Template
{{#each users}}
  Name:  {{name}}
  <img src="{{image}}" />
{{/each}}

- Template Data
{ 'users': [
  {  name: 'Ryan',
     image: 'ryan.jpg'
  },
  { name: 'Joe',
    image: 'joe.jpg'
  }
]}

- Output
Name: Ryan
<img src="ryan.jpg" />
Name:Joe
<img src="joe.jpg" />
=============
Data format for "dog"

{
	id:string,
	image:string,
	name:string,
	isDog:boolean

}	
=========
@data variables
Special properties in Handlebars

@root
Root context of the template
==========
 - Mustache does have logic, more boolean - Truthy Falsy 

{{#propOrNot}}
  I exist!      // <== if
{{/propOrNot}}

{{^propOrNot}}
  I don't exist!   // <== else
{{/propOrNot}}

 - Handlebars

{{#if truthOrFalsy}}
  I am truthy!
{{/if}}

{{#if truthyOrFalsy}}
  Wait, I though I was falsy?
{{else}}
  I knew I was falsy!
{{/if}}

 =======
 - Each + Else Example
{{#each dogs}}
  {{dog_stuff}}
{{else}}
  No dogs!
{{/each}}
// if nothing is in "dogs", then Else is show "No dogs!"

======
Handlebars If Helper limitations
 Can not do comparisons, no operations, only one argument
==========
Registering a Partial template

var dog_template = '<div>{{dog.name}} is a cutie!</div>';'
Handlebars.registerPartial('dog', dog_template); // ('ParialReferenceName', Partial_Template)

// - Using a Partial
<script id="my_template">
...
 {{> dog}}  // notice the "right facing arrow" + the registered name of the partial
...
</script>
===========
Escape HTML

data:{html:'ampersand=>&'}
template:<div>{{html}}</div>
output:<div>ampersand=&gt;&amp;</div>

To output "raw" HTML use 3 braces {{{ }}}
data:{html:'<b>DOG</b>'}
template:<div>{{{html}}}</div>
output:<div><b>DOG</b></div>
==========
Tilde Killed the Whitespace --- or How to remove funky handlebars whitespace code stink
{{~prop1}}
{{prop1~}}
{{~prop1~}}
{{~#each prop1~}}
note: this affects the rendered code, not the whitespace in the browser.
=======
It can execute function with arguments 

Function Properties
  Locally scoped and defined in Mustache

Helpers
  Globally scoped and implemented in Handlebars
=======
Youmightnotneedjquery.com
  - Vanilla JS instead of jQuery
==
Helpers...
	are global references to JavaScript functions
	accept arguments
	accept templates
	output strings to render
	

functions
=======
Helper Registration - adding Helpers to Global

Handlebars.registerHelper('myHelper', exampleHelperFunction); // ('Helper Reference', exampleHelperFunction);
==
Helper Arguments
 function exampleHelperFunction(arg1, arg2) {
   //this.something
   //this.anotherThing  
 }  //*this  refers to context where helper was called
==
- Must register Helper before rendering it in a template
- Beware of naming collisions, Helper references will override properties
==
Helpers in Templates
<script type="text/x-handlebars-template" id="main-templ">
  {{myHelper arg1 'arg2'}}
</script>
===
Helpers can be used in the JavaScript also.  They are kept in Handlebars.helpers.
===
SafeString

====
Subexpressions
  helpers inside helpers
example
  {{formatMoney (applySalesTax 4589)}}
      ^Executes After  ^Executes First
====
Block Helper
 #each
 if else

 {{#myHelper onlyArg arg2=arg2 arg3='arg3'}}
   //helper stuff
{{/myHelper}}

Block Helper in JS

function blockHelperFunction(context, option) { //(Arg from Template, Special Object)
  //block helper stuff
}

options arguments properties
  hash - contains hash arguments from template expression
  fn - compiled function containing inner template
  




